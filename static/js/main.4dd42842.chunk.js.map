{"version":3,"sources":["redux/states/admin.js","redux/reducers/index.js","redux/store/index.js","redux/actions/index.js","redux/reducers/admin.js","views/login/log_user.js","views/login/index.jsx","views/main/chat_functions.js","views/main/manage_room.js","views/main/search_mode.jsx","socket/index.js","components/chat/post_message.js","components/chat/index.js","views/main/index.js","App.js","index.js","views/login/encryption.js"],"names":["admin","state","page","user","rooms_details","current_room","sent_messages","generated_room","okay_to_create","generate_room_raw","action","type","props","key","value","message","room_id","chats","push","rootReducer","combineReducers","rootStore","createStore","rooms","details","store","dispatch","actions","domain","log_user","a","username","password","login","url_main","body","user_name","email","full_name","axios","post","then","res","data","catch","err","console","log","success","response","Login","loading","form","password_confirm","render_input_containers","className","color","height","width","output_arr","includes","onChange","e","change_input","disabled","placeholder","slice","map","item","index","is_proceed_disabled","null_entries","click_proceed","setState","encryption","encrypt","hasOwnProperty","undefined","admin_functions","toggle","alert","target","actual_val","this","not_proceed","onClick","id","Component","get_room_details","user_id","get","delete_account","_id","update_key","logout","get_people","create_room","members_add","leave_room","seen_message","timestamp","person_id","accept_room_request","obj","room_keys","Object","keys","gen_2","JSON","parse","stringify","filter","person","members_here","length","count","forEach","indexOf","raw","generated_room_raw","Search_Mode","results","search_users","chat_functions","change_value","add_to_room","manage_room","componentDidMount","connect","io","socket","post_message","Message_Input","recieve_message","off","on","room","temp_message","setTimeout","socket_confirm_join","join","active","hover","latest_time_stamp","send_message","Date","getTime","obj_message","from","emit","chat_box","document","getElementsByClassName","scrollTop","scrollHeight","send_response","new_array","filter_out","confirmed","array","scrollToBottom","change","test","replace","when","time","date","toLocaleDateString","toLocaleTimeString","moment","fromNow","map_message_status","status","opacity","marginBottom","interpret_status","style","accept","send_accept_request","reject","set_up_rooms","add","animateScroll","containerId","name","members","is_public","ref","chat","React","App","refresh","mapper","i_am_online","changed","target_room","online","search_mode","identify_room_name","new_room","old_room","assign","setInterval","componentWillUnmount","change_search_mode","set_up","Generated_rooms_handler","remove_from_room","sender","to_send","new_member","Room_display","delete_room","loading_2","show_pref","change_attribute","summarize_key","output_str","render_room_content","entries","delete_acc","b","preferences_section","text","key_name","toggle_del","change_pass_val","toggle_mode","Change_this","update","change_input_ps","config","num","rps","radius","life","v","tha","alpha","scale","position","cross","random","Math","onParticleUpdate","ctx","particle","beginPath","rect","p","x","y","fillStyle","fill","closePath","bg","ReactDOM","render","StrictMode","getElementById","crypto","require","randomBytes","module","exports","mykey","createCipher","mystr","final"],"mappings":"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","file":"static/js/main.4dd42842.chunk.js","sourcesContent":["\r\nconst admin = (state={page:1, user:null, rooms_details:{},\r\n     current_room:\"5f32a4fc7a25325b2c951a2d\", sent_messages:[], generated_room:[], okay_to_create:false, \r\n    generate_room_raw:[]}, action) => {\r\n    switch(action.type){\r\n            //setup of page\r\n        case 0:\r\n            return { ...state, page:action.props.page }\r\n            //setup of the user details  \r\n        case 1:\r\n            return { ...state, user:action.props }\r\n            // setup of the rooms\r\n        case 2:\r\n            return { ...state, rooms_details:action.props}\r\n\r\n        case 3:\r\n            return { ...state, [action.props.key]:action.props.value }\r\n\r\n        case 4:\r\n            const message =  action.props;\r\n            state.rooms_details[message.room_id].chats.push(message);\r\n            return { ...state, rooms_details:state.rooms_details }\r\n\r\n        case 5:\r\n            state.sent_messages = action.props.sent_messages;\r\n            return { ...state };\r\n                             \r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst temp_user = {\r\n    user_name:\"472mbah\",\r\n    full_name:\"Momodou Bah\",\r\n    _id:\"5f36dd5a86265165ec022bff\",\r\n    email:\"google.co.uk\",\r\n    password:null,\r\n    rooms:[\"5f32aa2af1f8167792e527f1\", \"5f37a237f94ce134445345d5\"],\r\n\r\n}   \r\n\r\nexport default admin;\r\n","import { combineReducers } from 'redux';\r\nimport admin from '../states/admin';\r\nconst rootReducer = combineReducers({\r\n    admin,\r\n})\r\n\r\nexport default rootReducer;","import { createStore } from 'redux';\r\nimport rootReducer from '../reducers';\r\n\r\nlet rootStore = createStore(rootReducer);\r\n\r\nexport default rootStore;\r\n\r\n","\r\nconst change_page = (page) => ({\r\n    type:0,\r\n    props:{page}\r\n})\r\n\r\nconst add_details = user => ({\r\n    type:1,\r\n    props:user\r\n})\r\n\r\nconst set_up_room_details = rooms => ({\r\n    type:2,\r\n    props:rooms,\r\n})\r\n\r\nconst change_attribute = (key, value) => ({\r\n    type:3,\r\n    props:{key, value},\r\n})\r\n\r\nconst push_message = message => ({\r\n    type:4,\r\n    props:message,\r\n})\r\n\r\nconst update_sent_messages = sent_messages => ({\r\n    type:5,\r\n    props:{sent_messages},    \r\n}) \r\n\r\nexport default { add_details, change_page, set_up_room_details,\r\n     push_message, change_attribute, \r\n     update_sent_messages\r\n    }","import store from '../store';\r\nimport actions from '../actions';\r\n\r\nconst state = (prop) => {\r\n    return store.getState()[prop];\r\n}\r\n\r\n\r\nconst change_page = page => {\r\n    store.dispatch(actions.change_page(page))\r\n}\r\n\r\nconst add_details = details => {\r\n    store.dispatch(actions.add_details(details))\r\n}\r\n\r\nconst set_up_room_details = rooms => {\r\n    store.dispatch(actions.set_up_room_details(rooms))\r\n}\r\n\r\nconst change_attribute = (key, value) => {\r\n    store.dispatch(actions.change_attribute(key, value))\r\n}\r\n\r\nconst push_message = message => {\r\n    store.dispatch(actions.push_message(message))\r\n}\r\n\r\nconst update_sent_messages = sent_messages => {\r\n    store.dispatch(actions.update_sent_messages(sent_messages))\r\n}\r\n\r\n\r\nexport default { state, change_page, add_details, \r\n    set_up_room_details, change_attribute, push_message, update_sent_messages }\r\n\r\n","import axios from 'axios';\r\n\r\nconst domain = \"https://CHAT33720.momodoubah1.repl.co/\"; \r\n\r\n\r\nconst log_user = async ({username, password}, login=true) => {\r\n\r\n    const url_main = `${domain}users/${login ? 'login':'register'}`;\r\n    const body = {\r\n        user_name: username,\r\n        password,\r\n        email: null,\r\n        full_name: null\r\n    }\r\n    const response = await axios.post(url_main, body).then(res => {\r\n        return res.data}).catch(err => {\r\n            console.log(err)\r\n            return { success:false, message:\"Unable to get details.\"}\r\n    });\r\n    return response;\r\n\r\n}\r\n\r\nexport default log_user;","import React, { Component } from 'react';\r\nimport encryption from './encryption';\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\r\nimport Loader from 'react-loader-spinner';\r\nimport admin_functions from '../../redux/reducers/admin';\r\nimport log_user from './log_user';\r\n\r\nclass Login extends Component {\r\n\r\n    state = {\r\n        login:true,\r\n        loading:false,\r\n        form: { username:null, password:null, password_confirm:null },\r\n        err:null,\r\n    }\r\n\r\n    render_input_containers = () => {\r\n\r\n        const { form, login, loading } = this.state;\r\n\r\n        if(loading){\r\n\r\n            return (\r\n                <div className=\"login_loading_container\">\r\n                    <Loader type=\"Circles\" color=\"#000\" height={25} width={25} /> \r\n            <p>{login ? \"Logging in\":\"Creating account for\"} {form.username}</p>\r\n                </div>                \r\n            )\r\n           \r\n        }else {\r\n            let output_arr = [];\r\n\r\n            for(let key in form){\r\n                output_arr.push(\r\n                    <input type={key.includes(\"password\")?\"password\":\"text\"} onChange={(e)=>this.change_input(e, key)} disabled={loading} key={key} placeholder={\"Enter \"+key} />\r\n                )\r\n            }\r\n    \r\n            if(login) output_arr = output_arr.slice(0, 2);\r\n    \r\n    \r\n    \r\n            return <div className=\"login_box_inputs\">\r\n                {\r\n                    output_arr.map((item, index)=>item)\r\n                }\r\n            </div>;\r\n    \r\n        }\r\n\r\n\r\n    }\r\n\r\n    is_proceed_disabled = () => {\r\n        const { form } = this.state;\r\n        let null_entries = 0;\r\n\r\n        for(let key in form){\r\n            null_entries = form[key]==null ? null_entries+1 : null_entries;\r\n        }\r\n\r\n        return null_entries!=0\r\n        \r\n    }\r\n\r\n    click_proceed = async () => {\r\n        let { form, login } = this.state;\r\n        const { password, password_confirm } = form;\r\n        this.setState({loading:true})\r\n        if(login){\r\n            form.password_confirm = form.password;\r\n        }\r\n        if(password==password_confirm){\r\n            form.password = encryption.encrypt(form.password);\r\n            this.setState({err:null})\r\n            const response = await log_user(form, login);\r\n            if(response.success && response.hasOwnProperty('data') && response.data != null && response.data != undefined ){\r\n                admin_functions.add_details(response.data)\r\n            }\r\n            else {\r\n                this.setState({err:response.message})\r\n            }\r\n        }else {\r\n            this.setState({err:\"Ensure both passwords match\"})\r\n        }\r\n        this.setState({loading:false})\r\n        \r\n    } \r\n\r\n    toggle = () => {\r\n        let { login } = this.state;\r\n        this.setState({login:!login})\r\n        if(login){\r\n            alert(\"Passwords are encrypted, but since the source code for this application is public, they can be decrypted easily. Thank you.\")\r\n        }\r\n    }\r\n\r\n    change_input = ({target}, key) => {\r\n        const { form, login } = this.state;\r\n        const { value } = target;\r\n        const actual_val = value==\"\" ? null : value\r\n        form[key] = actual_val;\r\n        if(login && key=='password'){\r\n            form.password_confirm = actual_val;\r\n        }\r\n        \r\n        this.setState({form})\r\n    }\r\n\r\n    render(){\r\n\r\n        const { login, loading, err } = this.state;\r\n        const not_proceed = loading || this.is_proceed_disabled();\r\n        \r\n\r\n\r\n        return(\r\n            <div className=\"login_container\">\r\n                <p className=\"logo_main\">CHAT337</p>\r\n                {this.render_input_containers()}\r\n                <div className=\"instead_button_container\">\r\n\r\n\r\n                    <button className={loading ? \"instead_button_dis\":'instead_button'} disabled={loading} onClick={this.toggle} >{login ? 'Register':'Login'} instead</button>\r\n                    \r\n\r\n                    \r\n                    <button onClick={this.click_proceed} id={not_proceed ? null:\"proceed_button\"} \r\n                        disabled={not_proceed} className={not_proceed ? \"instead_button_dis\":'instead_button'}>\r\n                        {login? 'Login':'Register'}\r\n                    </button>\r\n\r\n                </div>\r\n                <p className=\"err_message\">{err}</p>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login;","import axios from 'axios';\r\n\r\nconst domain = \"https://CHAT33720.momodoubah1.repl.co/\"; \r\n\r\nconst get_room_details = async (room_id, user_id) => {\r\n\r\n    const url_main = `${domain}rooms/get_room_by_id/${room_id}/${user_id}`;\r\n    const response = await axios.get(url_main).then(res => \r\n        {return res.data}).catch(() => {\r\n            return { success:false, message:\"Unable to get details.\"}\r\n    });\r\n\r\n\r\n    return response;\r\n\r\n}\r\n\r\nconst delete_account = async (_id, password) => {\r\n\r\n    const url_main = `${domain}users/remove_account`;\r\n\r\n    const body = { _id, password }\r\n\r\n    const response = await axios.post(url_main, body).then(res => \r\n        {return res.data}).catch((e) => {\r\n            console.log(e)\r\n            return { success:false, message:\"Unable to delete account, try again later.\"}\r\n    });\r\n\r\n\r\n    return response;\r\n\r\n}\r\n\r\nconst update_key = async (key, value, password, _id) => {\r\n\r\n    const url_main = `${domain}users/edit_details`;\r\n\r\n    const body = { key, value, password, _id }\r\n\r\n    const response = await axios.post(url_main, body).then(res => \r\n        {return res.data}).catch((e) => {\r\n            return { success:false, logout:true, message:\"Logging you out, either because you don't have an internet connection or becuase password entered was incorrect\"}\r\n    });\r\n\r\n\r\n    return response;\r\n\r\n}\r\n\r\n\r\nconst get_people = async (user_name) => {\r\n\r\n    const url_main = `${domain}users/find_by_username/${user_name}`;\r\n    const response = await axios.get(url_main).then(res => \r\n        {return res.data}).catch(() => {\r\n            return { success:false, message:\"Unable to get results at this time\"}\r\n    });\r\n\r\n\r\n    return response;\r\n\r\n}\r\n\r\nconst create_room = async (_id, members_add) => {\r\n\r\n    const url_main = `${domain}rooms/create_room`;\r\n\r\n    const body = { _id, members_add }\r\n\r\n    const response = await axios.post(url_main, body).then(res => \r\n        {return res.data}).catch((e) => {\r\n            return { success:false, message:\"Unable to create room at this time, try again later.\"}\r\n    });\r\n\r\n\r\n    return response;\r\n\r\n} \r\n\r\nconst leave_room = async (_id, room_id) => {\r\n    const url_main = `${domain}rooms/leave_room`;\r\n\r\n    const body = { _id, room_id }\r\n\r\n    const response = await axios.post(url_main, body).then(res => \r\n        {return res.data}).catch((e) => {\r\n            return { success:false, message:\"Unable to create room at this time, try again later.\"}\r\n    });\r\n\r\n\r\n    return response;\r\n\r\n} \r\n\r\nconst seen_message = async (_id, timestamp, person_id) => {\r\n    const url_main = `${domain}rooms/seen_message`;\r\n\r\n    const body = { _id, timestamp, person_id }\r\n\r\n    const response = await axios.post(url_main, body).then(res => \r\n        {return res.data}).catch((e) => {\r\n            console.log(e)\r\n            return { success:false, message:\"Unable to create room at this time, try again later.\"}\r\n    });\r\n\r\n\r\n    return response;\r\n\r\n} \r\n\r\nconst accept_room_request = async (_id, room_id) => {\r\n    const url_main = `${domain}rooms/accept_room_request`;\r\n\r\n    const body = { _id, room_id }\r\n\r\n    const response = await axios.post(url_main, body).then(res => \r\n        {return res.data}).catch((e) => {\r\n            return { success:false, message:\"Unable to create room at this time, try again later.\"}\r\n    });\r\n\r\n\r\n    return response;\r\n\r\n} \r\n\r\n\r\nexport default {get_room_details, delete_account, update_key, get_people, create_room, leave_room, seen_message, accept_room_request};","export default (rooms_details, generated_room, obj, push=true) => {\r\n    let create_room = true; \r\n    delete rooms_details['5f32aa2af1f8167792e527f1'] ;\r\n\r\n    const room_keys = Object.keys(rooms_details);\r\n\r\n    for(let a = 0; a < room_keys.length; a++){\r\n        let gen_2 = JSON.parse(JSON.stringify(generated_room));\r\n        \r\n        if(!create_room){\r\n          break;\r\n        }\r\n\r\n        if(push){\r\n            gen_2.push(obj); //array_obj\r\n        }else {\r\n            gen_2 = gen_2.filter(person=>{\r\n              return person._id != obj._id;\r\n            })\r\n        } \r\n\r\n        const { key } = rooms_details[room_keys[a]];\r\n        const members_here = Object.keys(key); //array_ids\r\n        if(gen_2.length > members_here.length){\r\n            create_room = true;\r\n        }else {\r\n          let count = 0;\r\n          gen_2.forEach(person=>{\r\n              if(members_here.indexOf(person._id)!= -1){\r\n                count++;\r\n              }              \r\n          })\r\n          create_room = count != members_here.length;  \r\n\r\n        }        \r\n    }\r\n\r\n    if(push){\r\n      generated_room.push(obj); //array_obj\r\n  }else {\r\n      generated_room = generated_room.filter(person=>{\r\n        return person._id != obj._id;\r\n      })\r\n  } \r\n\r\n    let raw = [];\r\n    generated_room.forEach(item=>{\r\n        raw.push(item._id);\r\n    }) \r\n\r\n    return { \r\n        generated_room, generated_room_raw:raw, okay_to_create:create_room\r\n    }\r\n}","import React, { Component} from 'react';\r\nimport chat_functions from './chat_functions'; \r\nimport Loader from 'react-loader-spinner';\r\nimport admin_functions from '../../redux/reducers/admin';\r\nimport { connect } from 'react-redux'\r\nimport manage_room from './manage_room';\r\n\r\nclass Search_Mode extends Component {\r\n\r\n    state = {\r\n      value:\"\",\r\n      loading:false,\r\n      results: [],\r\n      generated_room:[],\r\n      okay_to_create:false,\r\n    }\r\n\r\n    search_users = async () => {\r\n      const { value } = this.state;\r\n      this.setState({loading:true});\r\n      const response = await chat_functions.get_people(value);\r\n      if(response.success && response.hasOwnProperty('results')){\r\n          this.setState({results:response.results});\r\n      }\r\n      this.setState({loading:false});\r\n    }\r\n\r\n    change_value = ({target}) => {\r\n        this.setState({value:target.value})\r\n    }\r\n\r\n\r\n    add_to_room = (obj, push=true) => {\r\n        const { rooms_details, generated_room } = this.props.admin;\r\n        const results = manage_room(rooms_details, generated_room, obj, push);\r\n\r\n        admin_functions.change_attribute('generated_room', results.generated_room)\r\n        admin_functions.change_attribute('generated_room_raw', results.generated_room_raw)\r\n        admin_functions.change_attribute('okay_to_create', results.okay_to_create)\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        const { _id } = this.props.admin.user;\r\n        admin_functions.change_attribute('generated_room', [{_id}])\r\n        admin_functions.change_attribute('generated_room_raw', [_id])\r\n    }\r\n\r\n    render(){\r\n      const { generated_room_raw } = this.props.admin;\r\n      const { value, loading, results } = this.state;\r\n\r\n      return (\r\n        <div>\r\n\r\n            <div className=\"flex_type\">\r\n                <input value={value} onChange={this.change_value} className=\"password_one\" placeholder=\"Search for users\"/>\r\n                <button onClick={this.search_users}>Search</button>\r\n            </div>\r\n\r\n            {\r\n                  loading ? \r\n\r\n                  <div className=\"login_loading_container_3\">\r\n                    <Loader type=\"Circles\" color=\"#000\" height={25} width={25} /> \r\n                    <p>Searching...</p>\r\n                  </div> \r\n                        : null\r\n                }\r\n\r\n            {\r\n              results.length == 0 && value!=\"\" ? <p>No results yet</p> : results.length > 0 ?  <div>\r\n\r\n                {\r\n                  results.map(person=>\r\n                    <div onClick={()=>null} className=\"room_button\">\r\n                      <p>{person.user_name}</p>\r\n                      <span className=\"timestamp\">{person.full_name}</span>\r\n                      {\r\n                          generated_room_raw.indexOf(person._id) == -1 ? <button onClick={()=>this.add_to_room(person)}>Add to room</button> : null\r\n                      }\r\n                    </div>                    \r\n                  )\r\n                }\r\n                 \r\n              </div> : null\r\n            }\r\n\r\n        </div>\r\n      )\r\n    } \r\n\r\n}\r\n\r\nconst map_state = state => ({\r\n    admin : state.admin,\r\n})\r\n\r\nexport default connect(map_state)(Search_Mode);\r\n\r\n","import socket from 'socket.io-client';\r\n\r\nconst io = socket.connect('https://CHAT33720.momodoubah1.repl.co:3000');\r\n\r\nexport default io;","import axios from 'axios';\r\n\r\nconst post_message = async (room_id, message) => {\r\n\r\n    const url_main = `http://localhost:80/rooms/push_message`;\r\n    const body =  { _id: room_id, message }\r\n\r\n    const response = await axios.post(url_main, body).then(res => {\r\n        return res.data}).catch(() => {\r\n            return { success:false, message:\"Unable to get details.\"}\r\n    });\r\n    return response;\r\n\r\n}\r\n\r\nexport default post_message;","import React from 'react';\r\nimport moment from 'moment';\r\nimport socket from '../../socket';\r\nimport { animateScroll } from \"react-scroll\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\r\nimport Loader from 'react-loader-spinner';\r\nimport post_message from './post_message';\r\nimport admin_functions from '../../redux/reducers/admin'; \r\nimport chat_functions from '../../views/main/chat_functions'; \r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass Message_Input extends React.Component {\r\n\r\n    state = {\r\n        loading : false,\r\n    }\r\n\r\n    recieve_message = socket.off('user_typing').on('user_typing', data=> {\r\n        let { current_room, rooms_details } = this.props.admin;\r\n        const room = rooms_details[current_room];\r\n        if(current_room == data.room_id && room!=undefined){\r\n            const { key } = room;\r\n            const temp_message = key[data._id] + \" is typing...\"\r\n            this.setState({temp_message});\r\n            setTimeout(()=>{\r\n                this.setState({temp_message:null});\r\n            }, 2000)\r\n        }\r\n    })\r\n\r\n    socket_confirm_join = socket.off('confirm_enter_or_leave').on('confirm_enter_or_leave', data=> {\r\n        let { current_room, rooms_details } = this.props.admin;\r\n        const room = rooms_details[current_room];\r\n        if(current_room == data.room_id && room!=undefined){\r\n            const { key } = room;\r\n            const temp_message = key[data._id] + \" has \" + ( data.join ? \"joined \":\"left\" ) + \" the room.\"\r\n            this.setState({temp_message});\r\n            setTimeout(()=>{\r\n                this.setState({temp_message:null});\r\n            }, 2000)            \r\n        }\r\n    })\r\n\r\n    state = {\r\n        active : false,\r\n        hover : 0,\r\n        value: null,\r\n        latest_time_stamp:null,\r\n        // temp_message:\"Ryan smith is typing...\"\r\n        temp_message:null\r\n    }\r\n\r\n    send_message = async () => {\r\n        const { _id } = this.props.user;\r\n        const { value } = this.state;\r\n        if(value!=null){ \r\n            let { current_room, sent_messages } = this.props.admin;\r\n            const timestamp = new Date().getTime();\r\n            sent_messages.push(timestamp);\r\n            admin_functions.update_sent_messages(sent_messages);\r\n            this.setState({latest_time_stamp:timestamp});            \r\n            let obj_message = {\r\n                message: value,\r\n                from:_id,\r\n                timestamp:timestamp,\r\n                room_id:current_room,\r\n            }\r\n            socket.emit(\"send_message\", obj_message)\r\n            this.setState({value:\"\"})\r\n            const chat_box = document.getElementsByClassName(\"chat_box\");\r\n            chat_box.scrollTop = chat_box.scrollHeight\r\n            delete obj_message.room_id;\r\n            const send_response = await post_message(current_room, obj_message);\r\n            if(send_response.success && send_response.hasOwnProperty('confirmed')){\r\n                const new_array = this.filter_out(sent_messages, send_response.confirmed);\r\n                admin_functions.update_sent_messages(new_array);\r\n            }\r\n        }\r\n    }\r\n\r\n    filter_out = (array, _id) => {\r\n        return array.filter(item=>{\r\n            return item != _id;\r\n        })\r\n    }\r\n\r\n    scrollToBottom() {\r\n        animateScroll.scrollToBottom({\r\n          containerId: \"chat_box\"\r\n        });\r\n    } \r\n\r\n    componentDidUpdate() {\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.scrollToBottom();        \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    change = (e) => {\r\n        const { _id } = this.props.user;\r\n        const { current_room } = this.props.admin;\r\n        const { value } = e.target;\r\n\r\n        let typing_regex = /\\s/\r\n        if(typing_regex.test(value)){\r\n            socket.emit(\"typing\", {_id, room_id:current_room})\r\n        }\r\n\r\n        let wsRegex = /^\\s*\\s*$/\r\n        const new_string = value.replace(wsRegex, '')\r\n        if(new_string!=\"\"){\r\n            this.setState({value})\r\n        }else {\r\n            this.setState({value:null})\r\n        }\r\n    }\r\n\r\n\r\n\r\n    when = (time) => {\r\n\r\n        // const date = moment(time).format('L'); \r\n        const date = new Date(time)\r\n        const str_form = date.toLocaleDateString()+\"::\"+date.toLocaleTimeString()\r\n        return moment(date, \"DD/MM/YYYY::HH:mm:SS\").fromNow();     \r\n    } \r\n\r\n    map_message_status = status => ({\r\n        opacity:status<1 ? '0.6':'1',\r\n        width:'100%',\r\n        marginBottom:'1em' \r\n    })\r\n\r\n    // in members obj, each member will have missed array which \r\n    // when message is sent will push the _id of the new message being \r\n    // sent into all participants but the person who sent it\r\n    // person who recieves it, when they see the message can undo the previous \r\n    // operation by making that array empty   \r\n\r\n    interpret_status = timestamp => {\r\n        const { sent_messages } = this.props.admin;\r\n        if(sent_messages.indexOf(timestamp)==-1){\r\n            return {message:\"Sent\", style: {opacity:'1', width:'100%', marginBottom:'1em'}};\r\n        }else {\r\n            return {message:\"Sending...\", style:{opacity:'0.6', width:'100%', marginBottom:'1em'}}\r\n        }\r\n\r\n    }\r\n\r\n    accept = async () => {\r\n        this.setState({loading:true})\r\n        let { current_room, rooms_details, user } = this.props.admin;\r\n        const response = await chat_functions.accept_room_request(user._id, current_room);\r\n        if(response.success){\r\n            rooms_details[current_room].send_accept_request = false;\r\n            admin_functions.change_attribute('rooms_details', rooms_details);\r\n            \r\n        }else {\r\n            alert(\"Unable to accept at this time, try again later.\")\r\n        }\r\n        this.setState({loading:false})\r\n    }\r\n\r\n    reject = async () => {\r\n        this.setState({loading:true})\r\n        const { current_room, rooms_details, user } = this.props.admin;\r\n        const response = await chat_functions.leave_room(user._id, current_room);\r\n        if(response.success){\r\n            await this.props.set_up_rooms(false, current_room);\r\n            socket.emit('refresh_your_rooms', { room_id:current_room, _id:user._id, add:false })\r\n        }else {\r\n            alert(\"Unable to reject at this time, try again later.\")\r\n        }\r\n        this.setState({loading:false})\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const { rooms_details, admin } = this.props;\r\n        const { current_room, sent_messages } = admin;\r\n        const { value, temp_message, loading } = this.state;\r\n        const room = rooms_details[current_room];\r\n        // console.log(sent_messages)\r\n        return(\r\n            <div className=\"chat_container\">\r\n                {\r\n                    room != undefined   ? <div>{\r\n                        \r\n                         room.send_accept_request ? <div className=\"login_loading_container_2\">\r\n\r\n                            Accept room request?\r\n                            <button disabled={loading} onClick={this.accept}>Accept</button>\r\n                            <button disabled={loading} onClick={this.reject}>Reject</button>\r\n\r\n                        </div> : \r\n                        <div>\r\n\r\n                        <div id=\"title_chat_container\">\r\n                            <p id=\"chat_username_title\">{room.name}</p> \r\n                            <p className=\"timestamp\">{temp_message||room.members.length+\" people in chat room\"}</p>\r\n                            {\r\n                                !room.is_public ? \r\n                                <button disabled={loading} onClick={this.reject}>Leave room</button>\r\n                                : null \r\n                            }                                        \r\n                        </div> \r\n\r\n                        <div id='chat_box' ref={chat_box => (this.chat_box = chat_box)} className=\"chat_box\">\r\n                            \r\n                            {\r\n                                room.chats.map(chat=>\r\n                                     \r\n                                    {\r\n                                        const data = this.interpret_status(chat.timestamp||0);\r\n                                            return (\r\n                                                <div style={data.style}>\r\n                                                <span>{room.key[chat.from].user_name||\"Unkown\"}</span>\r\n                                                <p>{chat.message}</p>\r\n                                                <div className=\"chat_baseline\">\r\n                                                    <p className=\"timestamp\">{this.when(chat.timestamp)}</p>                                        \r\n                                                    <p className=\"timestamp\">{data.message}</p>                                        \r\n                                                </div>\r\n                                            </div>\r\n    \r\n                                            )\r\n                                        }\r\n                                    )\r\n                            }\r\n                        </div>\r\n                        <div >\r\n                    <textarea className=\"chat_text_input\" \r\n                    placeholder={\"Enter message here\"}  \r\n                    value={value} onChange={this.change}/>\r\n\r\n                    <div className=\"send_button_container\">\r\n                    <button disabled={value==null || value==\"\"} className=\"send_button\" onClick={this.send_message}>\r\n                        Send\r\n                    </button>                    \r\n\r\n                    </div>\r\n                </div>\r\n\r\n                    </div>\r\n                        \r\n                        \r\n                        }</div> : <div>\r\n\r\n\r\n                    <div className=\"login_loading_container_2\">\r\n                        <Loader type=\"Circles\" color=\"#000\" height={25} width={25} /> \r\n                        <p>Waiting for room data...</p>\r\n                    </div> \r\n\r\n\r\n                    </div>\r\n                }\r\n\r\n\r\n\r\n \r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n \r\n}\r\n\r\nconst map_state = state => ({\r\n    user: state.admin.user,\r\n    rooms_details : state.admin.rooms_details,\r\n    admin : state.admin,\r\n    state: state,\r\n})\r\n\r\nexport default connect(map_state)(Message_Input);","import React, { Component } from 'react';\r\nimport encryption from '../login/encryption';\r\nimport { connect } from 'react-redux';\r\nimport Search_Mode from './search_mode';\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\r\nimport Loader from 'react-loader-spinner';\r\nimport socket from '../../socket' \r\nimport manage_room from './manage_room';\r\nimport Chat from '../../components/chat';\r\nimport chat_functions from './chat_functions'; \r\nimport admin_functions from '../../redux/reducers/admin';\r\nimport search_mode from './search_mode';\r\n\r\nclass App extends Component {\r\n\r\n//  \r\n\r\n  refresh = socket.off('personal_refresh').on('personal_refresh', async data=>{\r\n      await this.set_up_rooms(data.add ? data.room_id:false, data.add ? false:data.room_id);\r\n  })\r\n\r\n  refresh = socket.off('told_to_refresh').on('told_to_refresh', async data=>{\r\n    await this.set_up_rooms(data.add ? data.room_id:false, data.add ? false:data.room_id);\r\n  })\r\n\r\n    \r\n\r\n    mapper = socket.off('inform_who_is_online').on('inform_who_is_online', data=>{\r\n      const { user } = this.props.admin;\r\n      socket.emit('i_am_online', { room_id:data.room_id, _id:user._id, \r\n        i_am_online: data.i_am_online\r\n      \r\n      })\r\n    })\r\n\r\n    socket_confirm_join = socket.off('confirm_that_i_am_online').on('confirm_that_i_am_online', data=> {\r\n      \r\n      let { rooms_details, user } = this.props.admin;\r\n        if(data._id != user._id){\r\n          if(rooms_details.hasOwnProperty(data.room_id)){\r\n            let changed = false;\r\n            const target_room = rooms_details[data.room_id];\r\n            const members = target_room.key;\r\n            if(members.hasOwnProperty(data._id)){\r\n                members[data._id].online = data.i_am_online;\r\n                changed = true; \r\n            } \r\n            if(changed){\r\n                target_room.key = members;\r\n                rooms_details[data.room_id] = target_room;\r\n                admin_functions.change_attribute('rooms_details', rooms_details);\r\n            }\r\n        }\r\n      }\r\n\r\n    })\r\n\r\n\r\n    mapper = socket.off('inform_who_is_online').on('inform_who_is_online', data=>{\r\n      const { user } = this.props.admin;\r\n      socket.emit('i_am_online', { room_id:data.room_id, _id:user._id, \r\n        i_am_online: data.i_am_online\r\n      \r\n      })\r\n    })\r\n\r\n    recieve_message = socket.off('recieve_message').on('recieve_message', async data=> {\r\n      const { user } = this.props.admin;\r\n      admin_functions.push_message(data)\r\n      // const res = chat_functions.seen_message(data.room_id, data.timestamp, user._id);\r\n      \r\n    })\r\n\r\n\r\n    state = {\r\n      loading:true,\r\n      search_mode:false,\r\n    } \r\n\r\n    identify_room_name = (_id, members, is_public) => {\r\n\r\n        if(is_public) return \"Public chat room\"\r\n\r\n        let name = \"\";\r\n        members = members.filter(person=>{\r\n            return person._id != _id;\r\n        });\r\n\r\n\r\n        members.forEach(person=>{\r\n          name+=`${person.full_name||person.user_name}+`;\r\n        })\r\n\r\n        name+=\"You\";\r\n        return name\r\n    }\r\n\r\n    set_up_rooms = async (new_room=false, old_room=false) => {\r\n      socket.emit('connection')\r\n      const { user } = this.props.admin;\r\n      let { rooms } = user;\r\n      rooms.push(\"5f32aa2af1f8167792e527f1\");\r\n      if(new_room!=false){\r\n          rooms.push(new_room)\r\n      }\r\n      if(old_room){\r\n        rooms = rooms.filter(room=>{\r\n            return room != old_room;\r\n        })\r\n      }\r\n      socket.emit('join_room', { room_id:user._id, _id:user._id })\r\n      let key = {};\r\n      for(let a = 0; a < rooms.length; a++){\r\n          const room = rooms[a]\r\n\r\n          const data = await chat_functions.get_room_details(room, user._id);\r\n          \r\n          if(data.success && data.hasOwnProperty('room')){\r\n            const name = this.identify_room_name(user._id, data.room.members, data.room.is_public);\r\n            data.room.name = name;\r\n            key = Object.assign(key, {[room]:data.room})\r\n            socket.emit('join_room', { room_id:room, _id:user._id })\r\n            socket.emit('tell_me_who_is_online', { room_id:room, _id:user._id, i_am_online:true })\r\n          }\r\n      }\r\n      admin_functions.set_up_room_details(key);\r\n      this.setState({loading:false})\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n       await this.set_up_rooms();\r\n        const { user } = this.props.admin;\r\n        let { rooms } = user;\r\n        rooms.push(\"5f32aa2af1f8167792e527f1\");\r\n        setInterval(()=>{\r\n          rooms.forEach(room=>{\r\n            socket.emit('tell_me_who_is_online', { room_id:room, _id:user._id, i_am_online:true })\r\n          })\r\n        }, 60000)\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n      const { user } = this.props.admin;\r\n      const { rooms } = user;\r\n      rooms.forEach(room=>{\r\n        socket.emit('tell_me_who_is_online', { room_id:room, _id:user._id, i_am_online:false })\r\n      })\r\n      this.setState({loading:true})\r\n      for(let a = 0; a < rooms.length; a++){\r\n          const room = rooms[a];\r\n          socket.emit('leave_room', { room_id:room, _id:user._id })\r\n      }       \r\n\r\n\r\n    }\r\n\r\n\r\n    change_search_mode = search_mode => {\r\n        this.setState({search_mode});\r\n    }\r\n\r\n  render(){\r\n\r\n    const { page, user, rooms_details, generated_room, okay_to_create, generated_room_raw } = this.props.admin;\r\n    const { rooms } = user;\r\n    const { loading, search_mode } = this.state;\r\n    const { change_page } = admin_functions;\r\n\r\n    return (\r\n      <div className=\"home\">\r\n             {\r\n            search_mode ? <Generated_rooms_handler search_mode={search_mode} change_search_mode={this.change_search_mode}\r\n            set_up={this.set_up_rooms}\r\n            generated_room_raw={generated_room_raw} rooms_details={rooms_details}\r\n            generated_room={generated_room} okay_to_create={okay_to_create}/>\r\n            : null\r\n            }\r\n            <Chat set_up_rooms={this.set_up_rooms} room_id={rooms[0]}/>\r\n            <Room_display search_mode={search_mode} change_search_mode={this.change_search_mode} _id={user._id} user={user} loading={loading} rooms={rooms_details}/>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Generated_rooms_handler extends Component {\r\n\r\n  state = {\r\n    loading:false,\r\n  }\r\n\r\n  remove_from_room = (obj, push=false) => {\r\n    const { rooms_details, generated_room } = this.props;\r\n    const results = manage_room(rooms_details, generated_room, obj, push);\r\n    admin_functions.change_attribute('generated_room', results.generated_room)\r\n    admin_functions.change_attribute('generated_room_raw', results.generated_room_raw)\r\n    admin_functions.change_attribute('okay_to_create', results.okay_to_create)\r\n  }\r\n\r\n  create_room = async () => {\r\n    this.setState({loading:true})\r\n      const { generated_room, generated_room_raw } = this.props;\r\n      const sender = generated_room[0]._id;\r\n      const to_send = generated_room_raw.filter(_id=>{\r\n        return _id != sender;\r\n      })\r\n\r\n      const response = await chat_functions.create_room(sender, to_send)\r\n      if(response.success){\r\n          this.props.change_search_mode(false)\r\n          await this.props.set_up(response.room_id);\r\n          \r\n          to_send.forEach(new_member=>{\r\n            console.log(new_member)\r\n            socket.emit('refresh_your_rooms_indiv', { room_id:response.room_id, _id:new_member, add:true });\r\n          })\r\n\r\n\r\n\r\n      }else {\r\n        admin_functions.change_attribute('okay_to_create', -1)\r\n      }\r\n      this.setState({loading:false})\r\n\r\n  }\r\n\r\n\r\n  render(){\r\n\r\n    const { generated_room, okay_to_create } = this.props;\r\n    const { loading } = this.state;\r\n    // console.log(generated_room, okay_to_create)\r\n    return (\r\n      <div className=\"chat_container_less\">\r\n        {\r\n            loading ? \r\n\r\n            <div className=\"login_loading_container\">\r\n              <Loader type=\"Circles\" color=\"#000\" height={25} width={25} /> \r\n              <p>Creating room</p>\r\n            </div> \r\n            \r\n            : <div>\r\n        <div className=\"flex_3\">\r\n          <h3>Generate new room</h3>\r\n          <button onClick={()=>this.props.change_search_mode(false)}>Cancel</button>\r\n        </div>\r\n        <p>Search and add on the right panel. Final changes here.</p>\r\n\r\n        {\r\n          generated_room.map(person=>\r\n          person.hasOwnProperty('user_name') ? \r\n            \r\n          <div className=\"flex_3\">\r\n            <h2>{person.user_name}</h2>\r\n            <button onClick={()=>this.remove_from_room(person)}>Remove account</button>            \r\n\r\n          </div>\r\n          \r\n          : null\r\n            )\r\n        }\r\n\r\n        <button onClick={this.create_room} disabled={!okay_to_create || !(generated_room.length > 1)}> Create chat room </button>\r\n        {\r\n          generated_room.length > 1 ?\r\n          <p className=\"err_message\"> {!okay_to_create ? \"Either add or remove users to generate room. This error message indicates their is a duplicate room\":null} </p>\r\n\r\n          : null\r\n\r\n        }  \r\n\r\n        {\r\n          <p className=\"err_message\"> {okay_to_create==-1 ? \"Unable to create room at the moment\":null} </p>\r\n\r\n        }            \r\n            </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Room_display extends Component {\r\n\r\n    state = {\r\n      delete_room : false,\r\n      err:null,\r\n      password:\"\",\r\n      loading_2:false,\r\n      show_pref:true,\r\n    }\r\n\r\n    change_attribute = (key) => {\r\n        admin_functions.change_attribute('current_room', key);\r\n    }\r\n\r\n    summarize_key = (key, _id) => {\r\n        let output_str = \"\";\r\n        for(let a in key){\r\n          if(a!=_id){\r\n                output_str += key[a].user_name + \" is \" + (key[a].online ? \"online \" : \"offline \");\r\n            }\r\n        }\r\n        return output_str;\r\n    }\r\n\r\n    render_room_content = () => {\r\n      const { rooms, _id } = this.props; \r\n      return (\r\n        <div>\r\n          {\r\n            Object.entries(rooms).map(([key, value]) => \r\n                <div onClick={()=>this.change_attribute(key)} className=\"room_button\">\r\n                  <p>{value.name}</p>\r\n                  <span className=\"timestamp\">{this.summarize_key(value.key, _id)}</span>\r\n                </div>\r\n            )            \r\n          }          \r\n        </div>        \r\n      )\r\n    }\r\n\r\n    delete_acc = async () => {\r\n        this.setState({loading_2:true})\r\n        const { _id, user  } = this.props; \r\n        let { password  } = this.state; \r\n        if(password!=\"\"){\r\n\r\n            for(let b = 0; b < user.rooms.length; b++){\r\n                const temp_del = await chat_functions.leave_room(_id, user.rooms[b]);\r\n                if(temp_del.success){\r\n                    socket.emit('refresh_your_rooms', { room_id:user.rooms[b], _id:_id, add:false })\r\n                }\r\n            }\r\n            password = encryption.encrypt(password);\r\n            const response = await chat_functions.delete_account(_id, password);\r\n            if(response.success){\r\n              alert(\"Your account has been removed, have a good day!\");\r\n              admin_functions.add_details(null);\r\n            }else {\r\n              this.setState({err:response.message});\r\n            }\r\n        }\r\n        this.setState({loading_2:false})\r\n    }\r\n\r\n\r\n\r\n    preferences_section = () => {\r\n        const { user } = this.props;\r\n        const { delete_room } = this.state; \r\n        const keys_to_display = ['user_name'];\r\n        const keys_to_edit_but_hide = ['password'];\r\n        const keys_to_edit = ['email', 'full_name'];\r\n\r\n        return (\r\n          <div className=\"reg_spacing\">\r\n              {\r\n                keys_to_display.map(item=>\r\n                  <p>{item}: {user[item]}</p>\r\n                  )\r\n              }\r\n              {\r\n                keys_to_edit_but_hide.map(item=>\r\n                  <div>\r\n                    <Change_this _id={user._id} text={item+\": *******\"} type=\"password\" key_name={item}/>\r\n                  </div>                  \r\n                  )\r\n              }\r\n              {\r\n                keys_to_edit.map(item=>\r\n                  <div>\r\n                    <Change_this _id={user._id} text={item+`: ${user[item]||'Not set'}`} type=\"text\" key_name={item}/>\r\n                  </div>                  \r\n                  )\r\n              } \r\n            <div className=\"flex_type\">                \r\n                    <button \r\n                    onClick={()=>admin_functions.add_details(null)}\r\n                    className=\"send_button\" >Logout</button> \r\n                    <button className=\"send_button\" onClick={this.toggle_del} >{delete_room ? \"Cancel\":\"Delete account\"}</button> \r\n\r\n            </div>                                         \r\n          </div>\r\n\r\n\r\n        )\r\n\r\n    }\r\n\r\n\r\n    change_pass_val = ({target}) => {\r\n      this.setState({password:target.value, err:null})\r\n    }\r\n\r\n    toggle_del = () => {\r\n      this.setState({delete_room:!this.state.delete_room})\r\n    }\r\n\r\n    toggle_mode = () => {\r\n      this.props.change_search_mode(!this.props.search_mode)\r\n    }\r\n\r\n    \r\n\r\n    render(){\r\n\r\n      const { loading, search_mode  } = this.props; \r\n      const { delete_room, err, password, loading_2, success, show_pref } = this.state;\r\n\r\n      return (\r\n        <div className=\"chat_container_less\">\r\n        <div className=\"flex_3\">\r\n          <h3>Preferences</h3>\r\n          <button onClick={()=>this.setState({show_pref:!show_pref})}>Toggle preferences</button>          \r\n        </div>\r\n        {\r\n          show_pref ? \r\n          \r\n          <div>\r\n            {this.preferences_section()}\r\n \r\n\r\n          </div>\r\n          \r\n           : null\r\n        }\r\n\r\n                  {\r\n                    delete_room ? \r\n                    <div >\r\n                    <div className=\"flex_type\">\r\n                      <input value={password} onChange={this.change_pass_val} className=\"password_one\" type=\"password\" placeholder=\"Enter password to confirm\"/>\r\n                  <button disabled={loading_2} onClick={this.delete_acc}>{loading_2 ? 'Deleting...':'Delete!'}</button>\r\n                    </div>\r\n                    <p>You will be removed from all rooms including the chats on the public one as well. Thank you!</p>\r\n\r\n                    </div>\r\n                    \r\n                    : null\r\n                    } \r\n\r\n              <p className=\"err_message\">{err}</p>\r\n              <p className=\"success_message\">{success}</p>\r\n\r\n            <div className=\"flex_3\">\r\n              <h3>Rooms</h3>\r\n                  <button onClick={this.toggle_mode}>{search_mode ? 'Existing rooms':'Add rooms'}</button>\r\n            </div>\r\n                  {\r\n\r\n                    search_mode ? <Search_Mode /> : \r\n                    <div>\r\n                      {\r\n                        this.render_room_content()\r\n                      }\r\n                      {\r\n                        loading ? \r\n\r\n                        <div className=\"login_loading_container\">\r\n                          <Loader type=\"Circles\" color=\"#000\" height={25} width={25} /> \r\n                          <p>Loading rooms</p>\r\n                        </div> \r\n                        \r\n                        : null\r\n                      }                      \r\n                    </div>\r\n\r\n                  }\r\n        </div>\r\n      )\r\n    }\r\n}\r\n\r\nclass Change_this extends Component {\r\n\r\n  state = {\r\n    change:false,\r\n    value: \"\",\r\n    password:\"\",\r\n    loading: false,\r\n    success:\"\",\r\n    err:null,\r\n  }\r\n\r\n  toggle = () => {\r\n    this.setState({change:!this.state.change})\r\n  }\r\n\r\n  update = async () => {\r\n    this.setState({loading:true})\r\n    const { _id, key_name  } = this.props; \r\n    let { value, password  } = this.state; \r\n    if(password!=\"\" && value!=\"\"){\r\n        if(key_name=='password'){\r\n          value = encryption.encrypt(value)\r\n        }\r\n        const response = await chat_functions.update_key(key_name, value, encryption.encrypt(password), _id);\r\n        if(response.success){\r\n\r\n          this.setState({password:\"\", value:\"\", success:response.message, change:false});\r\n          setTimeout(()=>{\r\n            this.setState({success:\"\"})\r\n          }, 3000)\r\n\r\n        }else {\r\n          this.setState({err:response.message});\r\n          if(response.logout){\r\n            setTimeout(()=>{\r\n              admin_functions.add_details(null);\r\n            }, 3000)\r\n          }\r\n        }\r\n    }else {\r\n      this.setState({err:\"Please give an input for both fields above\"})\r\n    }\r\n    this.setState({loading:false})\r\n  }\r\n\r\n  change_input = ({target}) => {\r\n    this.setState({value:target.value, err:null});\r\n  }\r\n\r\n  change_input_ps = ({target}) => {\r\n    this.setState({password:target.value, err:null});\r\n  }\r\n\r\n  render(){\r\n\r\n    const { change, loading, err, value, password, success } = this.state;\r\n    const { key_name, type, text } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"flex_3\">\r\n            <p>{text}</p>  \r\n            <button onClick={this.toggle} > {!change ? 'Change '+key_name :'Cancel key change'} </button>\r\n        </div>\r\n        {\r\n          change ? <div>\r\n\r\n              <input className=\"password_one\" placeholder={\"Set new \"+key_name} value={value} type={type} onChange={this.change_input}/>\r\n              <div className=\"flex_type\">\r\n                <input className=\"password_one\" placeholder={\"Enter password to confirm\"} value={password} type={\"password\"} onChange={this.change_input_ps}/>\r\n                <button onClick={this.update} disabled={loading || (value==\"\" || password==\"\") } >{loading ? 'Making changes...':'Proceed'}</button>\r\n              </div>\r\n          </div> : null\r\n        }\r\n        <p className=\"err_message\">{err}</p>\r\n        <p className=\"success_message\">{success}</p>\r\n\r\n      </div>\r\n    )\r\n  }\r\n\r\n} \r\n\r\n\r\nconst manage_state = state => ({\r\n  admin: state.admin\r\n})\r\n\r\nexport default connect(manage_state)(App);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Login from './views/login';\nimport Main from './views/main';\nimport ParticlesBg from \"particles-bg\";\n// import socket from './socket';\n\n// https://fullstackworld.com/post/a-react-particles-animation-background-component\nimport Chat from './components/chat';\nimport admin_functions from './redux/reducers/admin';\nimport './styles/index.css';\n\nclass App extends Component {\n\n  componentDidMount = () => {\n\n  }\n\n  render(){\n\n    const { page, user } = this.props.admin;\n    const { change_page } = admin_functions;\n\n    let config = {\n      num: [4, 7],\n      rps: 0.1,\n      radius: [5, 40],\n      life: [1.5, 3],\n      v: [2, 3],\n      tha: [-40, 40],\n      alpha: [0.6, 0],\n      scale: [.1, 0.4],\n      position: \"all\",\n      color: [\"random\", \"#ff0000\"],\n      cross: \"dead\",\n      // emitter: \"follow\",\n      random: 15\n    };\n\n    if (Math.random() > 0.85) {\n      config = Object.assign(config, {\n        onParticleUpdate: (ctx, particle) => {\n          ctx.beginPath();\n          ctx.rect(\n            particle.p.x,\n            particle.p.y,\n            particle.radius * 2,\n            particle.radius * 2\n          );\n          ctx.fillStyle = particle.color;\n          ctx.fill();\n          ctx.closePath();\n        }\n      });\n    }\n\n\n    return (\n      <div >\n        {\n          user==null ? <Login/> : <Main/>\n        }\n        <ParticlesBg type=\"custom\" config={config} bg={true} />\n      </div>\n    )\n  }\n}\n\nconst manage_state = state => ({\n  admin: state.admin\n})\n\nexport default connect(manage_state)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n","\r\n// https://www.w3schools.com/nodejs/ref_crypto.asp\r\n// Nodejs encryption with CTR\r\nconst crypto = require('crypto');\r\nconst algorithm = 'aes-256-cbc';\r\nconst key = crypto.randomBytes(32);\r\nconst iv = crypto.randomBytes(16);\r\n\r\nconst encrypt = text => {\r\n    var mykey = crypto.createCipher('aes-128-cbc', 'chat3372.0_password');\r\n    var mystr = mykey.update(text, 'utf8', 'hex')\r\n    mystr += mykey.final('hex');\r\n    return mystr;\r\n}\r\n\r\nmodule.exports = { encrypt }"],"sourceRoot":""}